h1. Sidekick


Sidekick is a command line tool to automatically trigger actions on certain events, as defined per project, in a local @.sidekick@ file in your project folder.

h3. Use cases

* Restart server when code is changed
* Compile Sass and CoffeeScript templates when they are updated
* Continuous testing, with notifications and flexible hooks
* Periodically running commands

You typically run Sidekick in the background while coding, to automate all this.

h3. Features

* Simple and powerful DSL. "Examples here.":http://github.com/jbe/sidekick/blob/master/lib/template
* _Triggers_ for watching files etc.
* _Helpers_ for compiling templates etc.
* Easy to write new _triggers_ and _helpers_.
* Already compiles many languages, thanks to "Tilt":http://github.com/rtomayko/tilt.



h2. Basic usage

Install with @gem install sidekick@ and invoke using the @sidekick@ command in your project folder. If you do not have a @.sidekick@ file, you will be offered a template. I recommend "reading it":http://github.com/jbe/sidekick/blob/master/lib/template.

h3. Currently available triggers:

|@watch(glob) { ... }@|run on file changes matching @glob@. Globs like "Dir[]":http://ruby-doc.org/core/classes/Dir.html#M002323". |
|@every(duration) { ... }@|run every @duration@ seconds|

h3. Currently available helpers:

|@sh(cmd)@|run shell command, printing and returning output|
|@log(str)@|log events to @STDOUT@.|
|@notify(message, title='sidekick')@|notify user via growl, libnotify etc.|
|@auto_compile(source_glob, target_path)@|compile on file changes using tilt (language automatically detected -- see example usage in template, and tilt documentation)|
|@restart_passenger@|restart passenger based environments by touching tmp/restart.txt|
|@load_gem?(name)@|tries to require @name@; returns true if success. otherwise false. informs user that more functions are available if they install it|

Note how some helpers, like @auto_compile@ set up both triggers and actions for you.

h2. Writing extensions

h3. Writing new helpers

To add more helpers, simply add methods to @Sidekick::Helpers@, like this:

<pre>
<code lang='ruby'>
  module Sidekick::Helpers
    def make_pickle
      PickeFactory.manufacture!
    end
  end
</code>
</pre>

They will be available to other helpers and to @.sidekick@ files. Also, if adding a group of methods it may be cleaner to use a separate module under @Sidekick::Helpers@, and then including it.


h3. Writing new triggers

To add new triggers, you have two options: blocks, and classes. Blocks are best for simple stuff, while classes are good for more complex code. Here are some examples of how you set up a new trigger using a block:

<pre>
<code lang='ruby'>

Sidekick::Triggers.register(:never) {|callback| }
# available in .sidekick like:
# never { puts 'nobody listens to me' }

Sidekick::Triggers.register(:on_startup) {|callback| callback.call }
# available like:
# on_startup { puts 'better to do this in the main scope than here' }

Sidekick::Triggers.register(:every) do |callback, duration|
  timeshare(duration) do
    callback.call
  end
end

</code>
</pre>

The last example is the internal implementation of the @every@ trigger seen earlier, which calls the block periodically. @callback@ is the block given to the trigger in the @.sidekick@ file. @timeshare@ is a special method provided by Sidekick to all extensions, to register the supplied block to be called every @duration@ seconds. This is useful for polling something without blocking or doing something out of this world.

Now, here is the last example written as a class:

<pre>
<code lang='ruby'>

class Sidekick::Triggers::Every

  def initialize(callback, duration)
    @callback = callback
    @duration = duration
  end

  def poll
    @callback.call
  end

  def poll_freq
    @duration
  end
end

Sidekick::Triggers.register_class(:watch, Watch)

</code>
</pre>

The @poll@ and @poll_freq@ methods are optional. @poll@ functions like the callback block in the previous example, while @poll_freq@ functions like the @duration@ argument, specifying how often to call @poll@. Only integers (whole seconds) are accepted. Finally, notice the last statement, which registers the class.

h2. Fun facts

The main code chunk of Sidekick is just under 100 lines, including documentation, excluding the default triggers and helpers.

You can keep your extensions in the @.sidekick@ file itself, or package them in gems, or (better) ask me to merge them into the main repository.

Similar projects:

* "Guard":http://github.com/guard/guard (too enterprisey imho)


h3. Copyright

Copyright (c) 2010 Jostein Berre Eliassen. See LICENSE for details.
