h1. Sidekick


Sidekick is a command line tool to automatically trigger running tasks on certain events, such as when you make updates. This is defined per project, in a local @.sidekick@ file in your project folder.

h3. Features

* Simple, powerful dsl. "Examples here.":http://github.com/jbe/sidekick/blob/master/lib/template
* Pre-defined triggers.
* Pre-defined helpers for common tasks.
* Easy to write new triggers and helpers.
* Esily compiles most languages thanks to "Tilt":http://github.com/rtomayko/tilt.
    
h3. Use cases

* Triggering server restart when code is changed
* Automatically compiling sass, CoffeeScript, etc.
* Continuous testing with notifications or hooks
* Periodically running commands


You would typically run it in the background while coding, to automatize things like restarting development servers on file changes, recompiling assets, continously running tests or periodically running commands.


h2. Basic usage

Install with @gem install sidekick@ and invoke it using the @sidekick@ shell command in your project folder. If you do not have a @.sidekick@ file, you will be offered a template.

I recommend "reading the template":http://github.com/jbe/sidekick/blob/master/lib/template.

The @watch@ and @every@ commands you see in it are triggers, while @notify@, @sh@, and @restart_passenger@ are helper methods. Some helpers, like @auto_compile@ set up both triggers and actions for you.

h3. Currently available triggers:

|@watch(glob)@|run on file changes matching @glob@. Globs like @Dir[]@. |
|@every(duration)@|run every @duration@ seconds|

h3. Currently available helpers:

|@sh(cmd)@|run shell command, showing output, like in rake|
|@log(str)@|log events to screen. cleaner than puts.|
|@notify@|notify user via growl, libnotify etc|
|@auto_compile(source_glob, target_path)@|compile using tilt on file changes (language automatically detected -- see template examples and tilt documentation)|
|@restart_passenger@|restart passenger based environments by touching tmp/restart.txt|
|@load_gem?(name)@|tries to load gem, true if success. otherwise false. informs user that more functions are available if they install it|

h2. Writing extensions

h3. Writing new helpers

To add more helpers, simply add methods to @Sidekick::Helpers@, like this:

<pre>
<code lang='ruby'>
  module Sidekick::Helpers
    def make_pickle
      PickeFactory.manufacture!
    end
  end
</code>
</pre>

When adding a group of methods it may be cleaner to use a separate module under @Sidekick::Helpers@, and then including it.


h3. Writing new triggers

To add new triggers, you have two options: blocks, and classes. Blocks are best for simple stuff, while classes are good for more complex code. This is how you set up a new trigger using a block:

<pre>
<code lang='ruby'>

register :every do |callback, duration|
  timeshare(duration) do
    callback.call
  end
end

</code>
</pre>

This is the internal implementation of the @every@ function seen earlier. The @timeshare@ method is provided by Sidekick to all extensions, and will call the supplied block every @duration@ seconds. This is also useful for polling something without blocking or forking.

Next, here is an example of the above written as a class:

<pre>
<code lang='ruby'>

class Sidekick::Triggers::Every

  def initialize(callback, duration)
    @callback = callback
    @duration = duration
  end

  def poll
    @callback.call
  end

  def poll_freq
    @duration
  end
end

Sidekick::Triggers.register_class(:watch, Watch)

</code>
</pre>

The @poll@ and @poll_freq@ methods are optional. @poll@ functions like the callback block in the previous example, while @poll_freq@ functions like the @duration@ argument, specifying how often to call @poll@ in seconds. Only integers are accepted. Finally, notice the last statement, which registers the class.

h2. Final lines...

The main code chunk of Sidekick is just under 100 lines, including documentation, excluding the default triggers and helpers. Why not read it..?

You can keep your extensions in the @.sidekick@ file itself, or package them in gems, or ask me to merge them into the main repository.

Similar projects:

* "Guard":http://github.com/guard/guard (too enterprisey for me)


h3. Copyright

Copyright (c) 2010 Jostein Berre Eliassen. See LICENSE for details.
